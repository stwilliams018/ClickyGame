{"version":3,"sources":["components/friendCard/index.js","components/wrapper/index.js","components/header/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","clickImage","id","alt","src","image","Wrapper","Header","children","App","state","friends","chosen","points","shuffleImages","array","i","length","j","Math","floor","random","_ref","finishGame","_this","alert","includes","oldChosen","console","log","newChosen","push","oldOrder","newOrder","setState","_this2","this","header","map","friendCard","key","wrapper","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ywDAgBeA,MAbf,SAAcC,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAML,EAAMM,WAAWN,EAAMO,MAC5DN,EAAAC,EAAAC,cAAA,mBACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKK,IAAK,OAAOC,IAAKT,EAAMU,iBCDrBC,MAJf,SAAiBX,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aCaTQ,MAdf,SAAgBZ,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYG,GAAG,SAC1BN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,yBAEAF,EAAAC,EAAAC,cAAA,oBAAWF,EAAAC,EAAAC,cAAA,YAAOH,EAAMa,UAAxB,gBC+EAC,6MA/EbC,MAAQ,CACNC,UACAC,OAAQ,GACRC,OAAQ,KAGVC,cAAgB,SAACC,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACnC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADLM,EAEZ,CAACP,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAF4BM,EAAA,GAExBP,EAAMG,GAFkBI,EAAA,GAIrC,OAAQP,KAGdQ,WAAa,WACLC,EAAKd,MAAMG,OAAS,GACpBY,MAAM,oBAGNA,MAAM,6CAEVD,EAAKd,MAAMG,OAAS,EACpBW,EAAKd,MAAME,OAAS,MAKxBX,WAAa,SAAAC,GACT,GAAIsB,EAAKd,MAAMG,OAAS,GAEpB,GAAIW,EAAKd,MAAME,OAAOc,SAASxB,GAC3BsB,EAAKD,iBAEJ,CACH,IAAII,EAAYH,EAAKd,MAAME,OAC3BgB,QAAQC,IAAIF,GACZ,IAAIG,EAAYH,EAAUI,KAAK7B,GAC/B0B,QAAQC,IAAIC,EAAW,aACvB,IAAIE,EAAWR,EAAKd,MAAMC,QACtBsB,EAAWT,EAAKV,cAAckB,GAClCR,EAAKU,SAAS,CACZrB,OAAQW,EAAKd,MAAMG,OAAQ,EAC3BF,QAASsB,EACTrB,OAAQkB,SASZN,EAAKD,sFAIF,IAAAY,EAAAC,KAEP,OADAR,QAAQC,IAAIO,KAAK1B,OAEfd,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACuC,EAAD,KAASD,KAAK1B,MAAMG,QACzBjB,EAAAC,EAAAC,cAAA,OAAKI,GAAG,SACHkC,KAAK1B,MAAMC,QAAQ2B,IAAI,SAACjC,EAAOW,GACjC,OAASpB,EAAAC,EAAAC,cAACyC,EAAD,CACJtC,WAAYkC,EAAKlC,WACjBC,GAAIG,EAAMH,GACVsC,IAAKxB,EACLX,MAAOA,EAAMA,WAIrBT,EAAAC,EAAAC,cAAC2C,EAAD,cAxEYC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f9140b08.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className=\"card\" onClick={() => props.clickImage(props.id)}>\r\n    <h1>hello</h1>\r\n      <div className=\"img-container\">\r\n        <img alt =\"Hell\" src={props.image} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\"></div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\n\r\n\r\nfunction Header(props){\r\n   return(\r\n       <div className=\"jumbotron\" id=\"jumbo\">\r\n           <div className=\"container\">\r\n               <h1>Clicky Game</h1>\r\n\r\n               <h2>Score: <span>{props.children}</span>  </h2>\r\n\r\n           </div>\r\n\r\n       </div>\r\n   )\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\";\nimport Card from \"./components/friendCard\";\nimport Wrapper from \"./components/wrapper\";\n\nimport Header from \"./components/header\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n\n  state = {\n    friends,\n    chosen: [],\n    points: 0,\n  };\n\n  shuffleImages = (array) => {\n    for (let i = 0; i < array.length; i++) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      return (array)\n}\n\nfinishGame = () => {\n    if (this.state.points < 11) {\n        alert('Try again Loser!')\n    }\n    else {\n        alert('Congrats you are the big winner! Go Again')\n    };\n    this.state.points = 0;\n    this.state.chosen = [];\n    //this.render()\n    //this.setState({ friends });\n}\n\nclickImage = id => {\n    if (this.state.points < 11){\n\n        if (this.state.chosen.includes(id)) {\n            this.finishGame()\n        }\n        else {\n          var oldChosen = this.state.chosen\n          console.log(oldChosen)\n          var newChosen = oldChosen.push(id)\n          console.log(newChosen, \"NewChosen\")\n          var oldOrder = this.state.friends\n          var newOrder = this.shuffleImages(oldOrder)\n          this.setState({\n            points: this.state.points +1,\n            friends: newOrder,\n            chosen: newChosen\n\n          })\n            //this.state.points ++;\n           // this.state.chosen.push(id);\n          //   this.shuffleImages()\n        }\n    }\n    else {\n        this.finishGame()\n    }\n}\n\n  render() {\n    console.log(this.state)\n    return (\n      <div><Header>{this.state.points}</Header>\n      <div id=\"cards\">\n          {this.state.friends.map((image, i) => {\n         return ( <Card\n              clickImage={this.clickImage}\n              id={image.id}\n              key={i}\n              image={image.image}\n            />)\n          })}\n      </div>\n      <Wrapper></Wrapper>\n      </div>\n    );\n  }\n\n  \n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}